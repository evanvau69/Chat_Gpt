import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from fastapi import FastAPI
import uvicorn
from threading import Thread
import asyncio
import logging

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API Key from Environment
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржПржХржЯрж┐ ржЙржирзНржиржд AI рж╕рж╣ржХрж╛рж░рзАред ржЖржорж╛ржХрзЗ ржпрзЗржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝рзЗ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:
- рж╕рж╛ржзрж╛рж░ржг ржЬрзНржЮрж╛ржи
- ржмрж┐ржЬрзНржЮрж╛ржи ржУ ржкрзНрж░ржпрзБржХрзНрждрж┐
- ржЗрждрж┐рж╣рж╛рж╕
- ржЧржгрж┐ржд
- рж╕рж╛рж╣рж┐рждрзНржп
- ржПржмржВ ржЖрж░рзЛ ржЕржирзЗржХ ржХрж┐ржЫрзБ!
""")

# ржЙржирзНржиржд ржкрзНрж░рж╢рзНржи ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржи
async def process_question(question: str) -> str:
    try:
        # ржмрж╛ржВрж▓рж╛ ржПржмржВ ржЗржВрж░рзЗржЬрж┐ ржЙржнржпрж╝ ржнрж╛рж╖рж╛рж░ ржЬржирзНржп ржЕржкрзНржЯрж┐ржорж╛ржЗржЬржб рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░ржорзНржкржЯ
        system_prompt = """
        ржЖржкржирж┐ ржПржХржЬржи ржмрж┐рж╢рзНржмржХрзЛрж╖рзАржпрж╝ ржЬрзНржЮрж╛ржи рж╕ржорзНржкржирзНржи рж╕рж╣ржХрж╛рж░рзАред ржпрзЗржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝рзЗ рж╕ржарж┐ржХ, ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржПржмржВ рждржерзНржпржкрзВрж░рзНржг ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред
        ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржнрж╛рж╖рж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐рждрзЗ ржЙрждрзНрждрж░ ржжрж┐ржиред
        ржЙрждрзНрждрж░ рж╣ржмрзЗ:
        - рж╕ржорзНржкрзВрж░рзНржг ржПржмржВ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд
        - ржирж┐рж░рзНржнрзБрж▓ рждржерзНржп рж╕ржорзГржжрзНржз
        - рж╕рж╣ржЬрзЗ ржмрзЛржзржЧржорзНржп
        - ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЙржжрж╛рж╣рж░ржг рж╕ржорзГржжрзНржз (ржкрзНрж░ржпрж╝рзЛржЬржирзЗ)
        """

        response = await openai.ChatCompletion.acreate(
            model="gpt-4",  # рж╕рж░рзНржмрзЛржЪрзНржЪ ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕рзЗрж░ ржЬржирзНржп GPT-4 ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            temperature=0.7,
            max_tokens=1500,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        logger.error(f"OpenAI API Error: {str(e)}")
        return None

# Main Handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.effective_user
    
    try:
        logger.info(f"User {user.id} asked: {user_message}")
        
        # ржкрзНрж░ржержорзЗ ржПржХржЯрж┐ ржЯрж╛ржЗржкрж┐ржВ ржЗржирзНржбрж┐ржХрзЗржЯрж░ ржжрзЗржЦрж╛ржи
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # ржкрзНрж░рж╢рзНржи ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
        reply = await process_question(user_message)
        
        if reply:
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("""
ЁЯФН ржЙрждрзНрждрж░ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ:
1. ржкрзНрж░рж╢рзНржиржЯрж┐ ржкрзБржирж░рж╛ржпрж╝ рж▓рж┐ржЦрзБржи
2. ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
3. ржкрзНрж░рж╢рзНржиржЯрж┐ ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржХрж░рзБржи
""")
            
    except asyncio.TimeoutError:
        await update.message.reply_text("тП│ ржЙрждрзНрждрж░ ржкрзЗрждрзЗ ржмрзЗрж╢рж┐ рж╕ржоржпрж╝ рж▓рж╛ржЧржЫрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи")
    except Exception as e:
        logger.error(f"Error for user {user.id}: {str(e)}", exc_info=True)
        await update.message.reply_text("""
тЪая╕П ржПржХржЯрж┐ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржорж╛ржжрзЗрж░ ржЯрж┐ржо ржПржЯрж┐ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗред
ржжржпрж╝рж╛ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред ржпржжрж┐ рж╕ржорж╕рзНржпрж╛ ржЕржмрзНржпрж╛рж╣ржд ржерж╛ржХрзЗ, @admin ржХрзЗ ржЬрж╛ржирж╛ржиред
""")

# FastAPI App for Render Health Check
def run_fastapi():
    app = FastAPI()
    
    @app.get("/")
    async def health_check():
        return {"status": "Telegram Bot is running"}
    
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))

# Telegram Bot Runner
def run_bot():
    try:
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("ЁЯдЦ Starting Advanced Q&A Bot...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"Failed to start bot: {str(e)}", exc_info=True)

if __name__ == "__main__":
    # Start FastAPI in a separate thread
    fastapi_thread = Thread(target=run_fastapi, daemon=True)
    fastapi_thread.start()
    
    # Start Telegram Bot in the main thread
    run_bot()
